<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<HTML
><HEAD
><TITLE
>从命令行传递参数给内核模块</TITLE
><META CHARSET="UTF-8"><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.79"><LINK
REL="HOME"
TITLE="The Linux Kernel Module Programming Guide"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Hello World"
HREF="c146.htm"><LINK
REL="PREVIOUS"
TITLE="Hello World (part 4): 内核模块证书和内核模块文档说明"
HREF="x303.htm"><LINK
REL="NEXT"
TITLE="由多个文件构成的内核模块"
HREF="x376.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>The Linux Kernel Module Programming Guide</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="x303.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 2. Hello World</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x376.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN346"
>从命令行传递参数给内核模块</A
></H1
><P
>模块也可以从命令行获取参数。但不是通过以前你习惯的<CODE
CLASS="VARNAME"
>argc</CODE
>/<CODE
CLASS="VARNAME"
>argv</CODE
>。</P
><P
>要传递参数给模块，首先将获取参数值的变量声明为全局变量。然后使用宏<CODE
CLASS="FUNCTION"
>MODULE_PARM()</CODE
>(在头文件<TT
CLASS="FILENAME"
>linux/module.h</TT
>)。运行时，insmod将给变量赋予命令行的参数，如同
	<B
CLASS="COMMAND"
>./insmod mymodule.o myvariable=5</B
>。为使代码清晰，变量的声明和宏都应该放在
	模块代码的开始部分。以下的代码范例也许将比我公认差劲的解说更好。</P
><P
>宏<CODE
CLASS="FUNCTION"
>MODULE_PARM()</CODE
>需要三个参数，变量的名字，其类型和在sysfs中关联文件的权限。整数型既可为通常的<CODE
CLASS="VARNAME"
>signed</CODE
>也可为<CODE
CLASS="VARNAME"
>unsigned</CODE
>。 如果你想使用整数数组或者字符串，请看<CODE
CLASS="FUNCTION"
>module_param_array()</CODE
>和<CODE
CLASS="FUNCTION"
>module_param_string()</CODE
>。

	<PRE
CLASS="SCREEN"
>int myint = 3;
module_param(myint, int, 0);
	</PRE
>

	</P
><P
>数组同样被支持。但是情况和2.4时代有点不一样了。为了追踪参数的个数，你需要传递一个指向数目变量的指针作为第三个参数。 在你自己，你也可以忽略数目并传递NULL。我们把两种可能性都列出来：</P
><PRE
CLASS="SCREEN"
>int myintarray[2];
module_param_array(myintarray, int, NULL, 0); /* not interested in count */
int myshortarray[4];
int count;
module_parm_array(myshortarray, short, &#38; count, 0); /* put count into "count" variable */
	</PRE
><P
>将初始值设为缺省使用的IO端口或IO内存是一个不错的作法。如果这些变量有缺省值，则可以进行自动设备检测，
	否则保持当前设置的值。我们将在后续章节解释清楚相关内容。在这里我只是演示如何向一个模块传递参数。</P
><P
>最后，还有这样一个宏，<CODE
CLASS="FUNCTION"
>MODULE_PARM_DESC()</CODE
>被用来注解该模块可以接收的参数。该宏
	两个参数：变量名和一个格式自由的对该变量的描述。</P
><A
NAME="AEN367"
></A
><DIV
CLASS="EXAMPLE"
><A
NAME="AEN370"
></A
><P
><B
>Example 2-7. hello-5.c</B
></P
><PRE
CLASS="PROGRAMLISTING"
>/*
 *  hello-5.c - Demonstrates command line argument passing to a module.
 */
#include &#60;linux/module.h&#62;
#include &#60;linux/moduleparam.h&#62;
#include &#60;linux/kernel.h&#62;
#include &#60;linux/init.h&#62;
#include &#60;linux/stat.h&#62;

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Peter Jay Salzman");

static short int myshort = 1;
static int myint = 420;
static long int mylong = 9999;
static char *mystring = "blah";
static int myintArray[2] = { -1, -1 };
static int arr_argc = 0;

/* 
 * module_param(foo, int, 0000)
 * The first param is the parameters name
 * The second param is it's data type
 * The final argument is the permissions bits, 
 * for exposing parameters in sysfs (if non-zero) at a later stage.
 */

module_param(myshort, short, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
MODULE_PARM_DESC(myshort, "A short integer");
module_param(myint, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
MODULE_PARM_DESC(myint, "An integer");
module_param(mylong, long, S_IRUSR);
MODULE_PARM_DESC(mylong, "A long integer");
module_param(mystring, charp, 0000);
MODULE_PARM_DESC(mystring, "A character string");

/*
 * module_param_array(name, type, num, perm);
 * The first param is the parameter's (in this case the array's) name
 * The second param is the data type of the elements of the array
 * The third argument is a pointer to the variable that will store the number
 * of elements of the array initialized by the user at module loading time
 * The fourth argument is the permission bits
 */
module_param_array(myintArray, int, &#38;arr_argc, 0000);
MODULE_PARM_DESC(myintArray, "An array of integers");

static int __init hello_5_init(void)
{
	int i;
	printk(KERN_INFO "Hello, world 5\n=============\n");
	printk(KERN_INFO "myshort is a short integer: %hd\n", myshort);
	printk(KERN_INFO "myint is an integer: %d\n", myint);
	printk(KERN_INFO "mylong is a long integer: %ld\n", mylong);
	printk(KERN_INFO "mystring is a string: %s\n", mystring);
	for (i = 0; i &#60; (sizeof myintArray / sizeof (int)); i++)
	{
		printk(KERN_INFO "myintArray[%d] = %d\n", i, myintArray[i]);
	}
	printk(KERN_INFO "got %d arguments for myintArray.\n", arr_argc);
	return 0;
}

static void __exit hello_5_exit(void)
{
	printk(KERN_INFO "Goodbye, world 5\n");
}

module_init(hello_5_init);
module_exit(hello_5_exit);</PRE
></DIV
><P
>我建议用下面的方法实验你的模块：</P
><PRE
CLASS="SCREEN"
>satan# insmod hello-5.o mystring="bebop" mybyte=255 myintArray=-1
mybyte is an 8 bit integer: 255
myshort is a short integer: 1
myint is an integer: 20
mylong is a long integer: 9999
mystring is a string: bebop
myintArray is -1 and 420

satan# rmmod hello-5
Goodbye, world 5

satan# insmod hello-5.o mystring="supercalifragilisticexpialidocious" \
&#62; mybyte=256 myintArray=-1,-1
mybyte is an 8 bit integer: 0
myshort is a short integer: 1
myint is an integer: 20
mylong is a long integer: 9999
mystring is a string: supercalifragilisticexpialidocious
myintArray is -1 and -1

satan# rmmod hello-5
Goodbye, world 5

satan# insmod hello-5.o mylong=hello
hello-5.o: invalid argument syntax for mylong: 'h'</PRE
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="x303.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x376.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Hello World (part 4): 内核模块证书和内核模块文档说明</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c146.htm"
ACCESSKEY="U"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>由多个文件构成的内核模块</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>