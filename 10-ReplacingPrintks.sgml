<sect1><title>替换<function>printk</function></title>

	<indexterm><primary>printk</primary><secondary>replacing</secondary></indexterm> 


	<para>在<xref linkend="usingx">中， 我说过最好不要在X中进行内核模块编程。在真正的内核模块开发中的确是这样。
	但在实际应用中，你想在任何加载模块的tty<footnote><para><emphasis>T</emphasis>ele<emphasis>ty</emphasis>pe, 
	原先是一种用来和Unix系统交互的键盘和打印机结合起来的装置。现在，它只是一个用来同Unix或类似的系统交流文字流
	的抽象的设备，而不管它具体是显示器，X中的xterm，还是一个通过telnet的网络连接。</para></footnote>终端中显示信息。
	</para>

	<indexterm><primary>current task</primary></indexterm>
	<indexterm><primary>task</primary><secondary>current</secondary></indexterm>
	<indexterm><primary>tty_structure</primary></indexterm>
	<indexterm><primary>struct</primary><secondary>tty</secondary></indexterm>

	<para>实现的方法是使用<varname>current</varname>指针，一个指向当前运行进程的指针，来获取当前任务的
	<structname>tty</structname>终端的结构体。然后，我们找到在该<structname>tty</structname>结构体中
	用来向tty写入字符信息的函数的指针。通过指针我们使用该函数来向终端写入信息。</para>

	<indexterm><primary>source file</primary><secondary>print_string.c</secondary></indexterm>



<example><title>print_string.c</title><programlisting><inlinegraphic fileref="lkmpg-examples/10-ReplacingPrintks/print_string.c" format="linespecific"/></inlinegraphic></programlisting></example>

</sect1>
<sect1><title>让你的键盘指示灯闪起来</title>
	<indexterm><primary>keyboard LEDs</primary><secondary>flashing</secondary></indexterm>     

	<para>你也许想让你的模块更直接的同外界交流，你的键盘指示灯就是一个不错的选择。它可以及时显示模块的工作状态，
	吸引你的注意，并且它们不许要任何设置，使用起来也不像向终端或磁盘写入信息那么危险。
	</para>

	<para>
	下面的这个模块代码演示了一个相当小的模块：当被加载入内核时，键盘指示灯就不停的闪烁，直到它被卸载。
	</para>

<example><title>kbleds.c</title><programlisting><inlinegraphic fileref="lkmpg-examples/10-ReplacingPrintks/kbleds.c" format="linespecific"/></inlinegraphic></programlisting></example>	

	<para>
	如果上面的方法都无法满足你调试的需要，你就可能需要其它的技巧了。还记得那个在<command> make menuconfig </command>
	时的CONFIG_LL_DEBUG参数吗？如果你激活该选项，你就可以获得对串口的底层操纵。如果这仍然不够爽，你还可以对
	<filename>kernel/printk.c</filename>或其它的基本的系统底层调用打补丁来使用printascii，从而可以通过串口跟踪
	内核的每步动作。如果你的架构不支持上面的例子却有一个标准的串口，这可能应该是你首先应该考虑的了。通过网络上的
	终端调试同样值得尝试。
	</para>

	<para>
	尽管有很多关于如何调试的技巧，但我要提醒的是任何调试都会代码带来影响。加入调试代码足以导致原始代码产生bug的
	条件的消失，所以尽可能少的加入调试代码并且确保它们不出现在成熟的代码中。
	</para>

</sect1>


<!--
vim: tw=128
-->
