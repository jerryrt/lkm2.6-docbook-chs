<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<HTML
><HEAD
><TITLE
>读写 /proc 文件</TITLE
><META CHARSET="UTF-8"><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.79"><LINK
REL="HOME"
TITLE="The Linux Kernel Module Programming Guide"
HREF="book1.htm"><LINK
REL="UP"
TITLE="The /proc File System"
HREF="c741.htm"><LINK
REL="PREVIOUS"
TITLE="The /proc File System"
HREF="c741.htm"><LINK
REL="NEXT"
TITLE="用标准文件系统管理 /proc 文件"
HREF="x826.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>The Linux Kernel Module Programming Guide</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c741.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 5. The /proc File System</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x826.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN805"
>读写 /proc 文件</A
></H1
><P
>我们已经看到<TT
CLASS="FILENAME"
>/proc</TT
>文件的一个很简单的例子，我们只是读取<TT
CLASS="FILENAME"
>/proc/helloworld</TT
>文件。也有可能写<TT
CLASS="FILENAME"
>/proc</TT
>文件。 它和读取的工作方式一样，当<TT
CLASS="FILENAME"
>/proc</TT
>被写入时调用一个函数。但是和读取有一点小小的区别，数据来自用户，所以 你不得不把数据从用户空间输入到内核空间（使用<CODE
CLASS="FUNCTION"
>copy_from_user</CODE
>或<CODE
CLASS="FUNCTION"
>get_user</CODE
>）。</P
><P
>使用<CODE
CLASS="FUNCTION"
>copy_from_user</CODE
>或<CODE
CLASS="FUNCTION"
>get_user</CODE
>的理由是Linux的内存空间（在Intel构架上如此，其它处理器上可能不同）是分段的。 这就意味着指针自身并不是指向一个确实的物理内存地址，而只是分段中的一个地址，而且你需要知道哪个段 将来是可用的。其中内核本身有一个分段，每个进程也都有一个。</P
><P
>进程可访问的分段只有它自己的，所以，当编写作为进程运行的普通程序时，没必要担心分段的问题，系统会自动处理 好它。但是，当一块内存缓冲区的内容需要在当前运行的进程和内核之间传递时，内核函数接收的是一个指向在进程段中 的缓冲区的指针。宏<CODE
CLASS="FUNCTION"
>put_user</CODE
>和<CODE
CLASS="FUNCTION"
>get_user</CODE
>允许你访问那块内存。这些函数只处理一个字符，你可以用<CODE
CLASS="FUNCTION"
>copy_to_user</CODE
> 和<CODE
CLASS="FUNCTION"
>copy_from_user</CODE
>处理多个字符。因为缓冲区在内核空间（在读写函数中），对于写函数你需要输入数据，因为 它来自用户空间，但对于读函数不然，因为数据已经在内核空间了。&#13;</P
><DIV
CLASS="EXAMPLE"
><A
NAME="AEN822"
></A
><P
><B
>Example 5-2. procfs2.c</B
></P
><PRE
CLASS="PROGRAMLISTING"
>/**
 * procfs2.c -   create a "file" in /proc
 *
 */
#include &#60;linux/module.h&#62;       /* Specifically, a module */
#include &#60;linux/kernel.h&#62;       /* We're doing kernel work */
#include &#60;linux/proc_fs.h&#62;      /* Necessary because we use the proc fs */
#include &#60;asm/uaccess.h&#62;        /* for copy_from_user */
#define PROCFS_MAX_SIZE         1024
#define PROCFS_NAME             "buffer1k"
/**
 * This structure hold information about the /proc file
 *
 */
static struct proc_dir_entry *Our_Proc_File;
/**
 * The buffer used to store character for this module
 *
 */
static char procfs_buffer[PROCFS_MAX_SIZE];
/**
 * The size of the buffer
 *
 */
static unsigned long procfs_buffer_size = 0;
/**
 * This function is called then the /proc file is read
 *
 */
int
procfile_read(char *buffer,
              char **buffer_location,
              off_t offset, int buffer_length, int *eof, void *data)
{
        int ret;
        printk(KERN_INFO "procfile_read (/proc/%s) called\n", PROCFS_NAME);
        if (offset &#62; 0) {
                /* we have finished to read, return 0 */
                ret = 0;
        } else {
                /* fill the buffer, return the buffer size */
                memcpy(buffer, procfs_buffer, procfs_buffer_size);
                ret = procfs_buffer_size;
        }
        return ret;
}
/**
 * This function is called with the /proc file is written
 *
 */
int procfile_write(struct file *file, const char *buffer, unsigned long count,
                    void *data)
{
        /* get buffer size */
        procfs_buffer_size = count;
        if (procfs_buffer_size &#62; PROCFS_MAX_SIZE ) {
                procfs_buffer_size = PROCFS_MAX_SIZE;
        }
        /* write data to the buffer */
        if ( copy_from_user(procfs_buffer, buffer, procfs_buffer_size) ) {
                return -EFAULT;
        }
        return procfs_buffer_size;
}
/**
 *This function is called when the module is loaded
 *
 */
int init_module()
{
        /* create the /proc file */
        Our_Proc_File = create_proc_entry(PROCFS_NAME, 0644, NULL);
        if (Our_Proc_File == NULL) {
                remove_proc_entry(PROCFS_NAME, &#38;proc_root);
                printk(KERN_ALERT "Error: Could not initialize /proc/%s\n",
                         PROCFS_NAME);
                return -ENOMEM;
        }
        Our_Proc_File-&#62;read_proc   = procfile_read;
        Our_Proc_File-&#62;write_proc  = procfile_write;
        Our_Proc_File-&#62;owner       = THIS_MODULE;
        Our_Proc_File-&#62;mode        = S_IFREG | S_IRUGO;
        Our_Proc_File-&#62;uid         = 0;
        Our_Proc_File-&#62;gid         = 0;
        Our_Proc_File-&#62;size        = 37;
        printk(KERN_INFO "/proc/%s created\n", PROCFS_NAME);
        return 0;        /* everything is ok */
}
/**
 *This function is called when the module is unloaded
 *
 */
void cleanup_module()
{
        remove_proc_entry(PROCFS_NAME, &#38;proc_root);
        printk(KERN_INFO "/proc/%s removed\n", PROCFS_NAME);
}</PRE
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c741.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x826.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>The /proc File System</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c741.htm"
ACCESSKEY="U"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>用标准文件系统管理 /proc 文件</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>