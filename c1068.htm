<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<HTML
><HEAD
><TITLE
>Blocking Processes</TITLE
><META CHARSET="UTF-8"><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.79"><LINK
REL="HOME"
TITLE="The Linux Kernel Module Programming Guide"
HREF="book1.htm"><LINK
REL="PREVIOUS"
TITLE="System Calls"
HREF="c998.htm"><LINK
REL="NEXT"
TITLE="Replacing Printks"
HREF="c1175.htm"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>The Linux Kernel Module Programming Guide</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c998.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="c1175.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="AEN1068"
></A
>Chapter 9. Blocking Processes</H1
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN1070"
>阻塞进程</A
></H1
><A
NAME="AEN1072"
></A
><A
NAME="AEN1074"
></A
><P
>当别人让你做一件你不能马上去做的事时，你会如何反映？如果你是人类的话，而且对方也是人类的话，
		你只会说：“现在不行，我忙着在。闪开！”但是如果你是一个内核模块而且你被一个进程以同样的问题困扰，
		你会有另外一个选择。你可以让该进程休眠直到你可以为它服务时。毕竟，这样的情况在内核中时时刻刻都在发生
		（这就是系统让多进程在单CPU上同时运行的方法）。</P
><A
NAME="AEN1078"
></A
><A
NAME="AEN1080"
></A
><A
NAME="AEN1082"
></A
><A
NAME="AEN1084"
></A
><A
NAME="AEN1086"
></A
><A
NAME="AEN1088"
></A
><A
NAME="AEN1090"
></A
><A
NAME="AEN1093"
></A
><A
NAME="AEN1095"
></A
><A
NAME="AEN1098"
></A
><A
NAME="AEN1100"
></A
><P
>这个内核模块就是一个这样的例子。文件（<TT
CLASS="FILENAME"
>/proc/sleep</TT
>)）只可以在同一时刻被一个进程打开。
		如果该文件已经被打开，内核模块将调用函数
		<CODE
CLASS="FUNCTION"
>wait_event_interruptible</CODE
><A
NAME="AEN1105"
HREF="#FTN.AEN1105"
><SPAN
CLASS="footnote"
>[1]</SPAN
></A
>。该函数修改task的状态（task是一个内核中的结构体数据结构，
		其中保存着对应进程的信息和该进程正在调用的系统调用，如果有的话）为
		<CODE
CLASS="PARAMETER"
>TASK_INTERRUPTIBLE</CODE
>意味着改进程将不会继续运行直到被唤醒，然后被添加到系统的进程等待队列
		<CODE
CLASS="STRUCTNAME"
>WaitQ</CODE
>中，一个等待打开该文件的队列中。然后，该函数调用系统调度器去切换到另一个不同的
		但有CPU运算请求的进程。</P
><P
>当一个进程处理完该文件并且关闭了该文件，<CODE
CLASS="FUNCTION"
>module_close</CODE
>就被调用执行了。
		该函数唤醒所有在等待队列中的进程（还没有只唤醒特定进程的机制）。然后该函数返回，
		那个刚刚关闭文件的进程得以继续运行。及时的，进程调度器会判定该进程执行已执行完毕，
		将CPU转让给别的进程。被提供CPU使用权的那个进程就恰好从先前系统调用
		<CODE
CLASS="FUNCTION"
>module_interruptible_sleep_on</CODE
><A
NAME="AEN1113"
HREF="#FTN.AEN1113"
><SPAN
CLASS="footnote"
>[2]</SPAN
></A
>后的地方开始继续执行。
		它可以设置一个全局变量去通知别的进程该文件已被打开占用了。当别的请求该文件的进程获得CPU时间片时，
		它们将检测该变量然后返回休眠。</P
><A
NAME="AEN1116"
></A
><A
NAME="AEN1118"
></A
><A
NAME="AEN1120"
></A
><A
NAME="AEN1122"
></A
><A
NAME="AEN1124"
></A
><A
NAME="AEN1126"
></A
><P
>因此，我们将使用<B
CLASS="COMMAND"
>tail -f</B
>保持文件在后台被打开着，当另一个进程尝试访问它时 （也是在后台，这样我们就不必切换到另一个虚拟控制台去。）。只要第一个后台进程被用 <B
CLASS="COMMAND"
>kill %1</B
>杀死，第二个就会被唤醒，它就能访问文件并终止。</P
><P
>更有趣的是，<CODE
CLASS="FUNCTION"
>module_close</CODE
>并不垄断唤醒等待中的请求文件的进程的权力。一个信号，像<B
CLASS="KEYCAP"
>Ctrl</B
>+<B
CLASS="KEYCAP"
>c</B
> (<CODE
CLASS="PARAMETER"
>SIGINT</CODE
>也能够唤醒别的进程
		<A
NAME="AEN1137"
HREF="#FTN.AEN1137"
><SPAN
CLASS="footnote"
>[3]</SPAN
></A
>。
		在这种情况下，我们想立即返回<CODE
CLASS="PARAMETER"
>-EINTR</CODE
> <A
NAME="AEN1145"
></A
>。
		这对用户很重要，举个例子来说，用户可以在某个进程接受到文件前终止该进程。&#13;</P
><A
NAME="AEN1147"
></A
><A
NAME="AEN1150"
></A
><A
NAME="AEN1152"
></A
><A
NAME="AEN1154"
></A
><A
NAME="AEN1156"
></A
><P
>还有一点值得注意。有些时候进程并不愿意休眠，它们要么立即执行它们想做的，
		要么被告知任务无法进行。这样的进程在打开文件时会使用标志<CODE
CLASS="PARAMETER"
>O_NONBLOCK</CODE
>。
		在别的进程被阻塞时内核应该做出的响应是返回错误代码<CODE
CLASS="PARAMETER"
>-EAGAIN</CODE
>，像在本例中对该文件的请求的进程。程序
		<B
CLASS="COMMAND"
>cat_noblock</B
>，在本章的源代码目录下可以找到，就能够使用标志位
		<CODE
CLASS="PARAMETER"
>O_NONBLOCK</CODE
>打开文件。</P
><PRE
CLASS="SCREEN"
>hostname:~/lkmpg-examples/09-BlockingProcesses# insmod sleep.ko
hostname:~/lkmpg-examples/09-BlockingProcesses# cat_noblock /proc/sleep
Last input:
hostname:~/lkmpg-examples/09-BlockingProcesses# tail -f /proc/sleep &#38;
Last input:
Last input:
Last input:
Last input:
Last input:
Last input:
Last input:
tail: /proc/sleep: file truncated
[1] 6540
hostname:~/lkmpg-examples/09-BlockingProcesses# cat_noblock /proc/sleep
Open would block
hostname:~/lkmpg-examples/09-BlockingProcesses# kill %1
[1]+ Terminated               tail -f /proc/sleep
hostname:~/lkmpg-examples/09-BlockingProcesses# cat_noblock /proc/sleep
Last input:
hostname:~/lkmpg-examples/09-BlockingProcesses#</PRE
><A
NAME="AEN1164"
></A
><DIV
CLASS="EXAMPLE"
><A
NAME="AEN1167"
></A
><P
><B
>Example 9-1. sleep.c</B
></P
><PRE
CLASS="PROGRAMLISTING"
>/*
 *  sleep.c - create a /proc file, and if several processes try to open it at
 *  the same time, put all but one to sleep
 */

#include &#60;linux/kernel.h&#62;	/* We're doing kernel work */
#include &#60;linux/module.h&#62;	/* Specifically, a module */
#include &#60;linux/proc_fs.h&#62;	/* Necessary because we use proc fs */
#include &#60;linux/sched.h&#62;	/* For putting processes to sleep and 
				   waking them up */
#include &#60;asm/uaccess.h&#62;	/* for get_user and put_user */

/* 
 * The module's file functions 
 */

/* 
 * Here we keep the last message received, to prove that we can process our
 * input
 */
#define MESSAGE_LENGTH 80
static char Message[MESSAGE_LENGTH];

static struct proc_dir_entry *Our_Proc_File;
#define PROC_ENTRY_FILENAME "sleep"

/* 
 * Since we use the file operations struct, we can't use the special proc
 * output provisions - we have to use a standard read function, which is this
 * function
 */
static ssize_t module_output(struct file *file,	/* see include/linux/fs.h   */
			     char *buf,	/* The buffer to put data to 
					   (in the user segment)    */
			     size_t len,	/* The length of the buffer */
			     loff_t * offset)
{
	static int finished = 0;
	int i;
	char message[MESSAGE_LENGTH + 30];

	/* 
	 * Return 0 to signify end of file - that we have nothing 
	 * more to say at this point.
	 */
	if (finished) {
		finished = 0;
		return 0;
	}

	/* 
	 * If you don't understand this by now, you're hopeless as a kernel
	 * programmer.
	 */
	sprintf(message, "Last input:%s\n", Message);
	for (i = 0; i &#60; len &#38;&#38; message[i]; i++)
		put_user(message[i], buf + i);

	finished = 1;
	return i;		/* Return the number of bytes "read" */
}

/* 
 * This function receives input from the user when the user writes to the /proc
 * file.
 */
static ssize_t module_input(struct file *file,	/* The file itself */
			    const char *buf,	/* The buffer with input */
			    size_t length,	/* The buffer's length */
			    loff_t * offset)
{				/* offset to file - ignore */
	int i;

	/* 
	 * Put the input into Message, where module_output will later be 
	 * able to use it
	 */
	for (i = 0; i &#60; MESSAGE_LENGTH - 1 &#38;&#38; i &#60; length; i++)
		get_user(Message[i], buf + i);
	/* 
	 * we want a standard, zero terminated string 
	 */
	Message[i] = '\0';

	/* 
	 * We need to return the number of input characters used 
	 */
	return i;
}

/* 
 * 1 if the file is currently open by somebody 
 */
int Already_Open = 0;

/* 
 * Queue of processes who want our file 
 */
DECLARE_WAIT_QUEUE_HEAD(WaitQ);
/* 
 * Called when the /proc file is opened 
 */
static int module_open(struct inode *inode, struct file *file)
{
	/* 
	 * If the file's flags include O_NONBLOCK, it means the process doesn't
	 * want to wait for the file.  In this case, if the file is already 
	 * open, we should fail with -EAGAIN, meaning "you'll have to try 
	 * again", instead of blocking a process which would rather stay awake.
	 */
	if ((file-&#62;f_flags &#38; O_NONBLOCK) &#38;&#38; Already_Open)
		return -EAGAIN;

	/* 
	 * This is the correct place for try_module_get(THIS_MODULE) because 
	 * if a process is in the loop, which is within the kernel module,
	 * the kernel module must not be removed.
	 */
	try_module_get(THIS_MODULE);

	/* 
	 * If the file is already open, wait until it isn't 
	 */

	while (Already_Open) {
		int i, is_sig = 0;

		/* 
		 * This function puts the current process, including any system
		 * calls, such as us, to sleep.  Execution will be resumed right
		 * after the function call, either because somebody called 
		 * wake_up(&#38;WaitQ) (only module_close does that, when the file 
		 * is closed) or when a signal, such as Ctrl-C, is sent 
		 * to the process
		 */
		wait_event_interruptible(WaitQ, !Already_Open);

		/* 
		 * If we woke up because we got a signal we're not blocking, 
		 * return -EINTR (fail the system call).  This allows processes
		 * to be killed or stopped.
		 */

/*
 * Emmanuel Papirakis:
 *
 * This is a little update to work with 2.2.*.  Signals now are contained in
 * two words (64 bits) and are stored in a structure that contains an array of
 * two unsigned longs.  We now have to make 2 checks in our if.
 *
 * Ori Pomerantz:
 *
 * Nobody promised me they'll never use more than 64 bits, or that this book
 * won't be used for a version of Linux with a word size of 16 bits.  This code
 * would work in any case.
 */
		for (i = 0; i &#60; _NSIG_WORDS &#38;&#38; !is_sig; i++)
			is_sig =
			    current-&#62;pending.signal.sig[i] &#38; ~current-&#62;
			    blocked.sig[i];

		if (is_sig) {
			/* 
			 * It's important to put module_put(THIS_MODULE) here,
			 * because for processes where the open is interrupted
			 * there will never be a corresponding close. If we 
			 * don't decrement the usage count here, we will be 
			 * left with a positive usage count which we'll have no
			 * way to bring down to zero, giving us an immortal 
			 * module, which can only be killed by rebooting 
			 * the machine.
			 */
			module_put(THIS_MODULE);
			return -EINTR;
		}
	}

	/* 
	 * If we got here, Already_Open must be zero 
	 */

	/* 
	 * Open the file 
	 */
	Already_Open = 1;
	return 0;		/* Allow the access */
}

/* 
 * Called when the /proc file is closed 
 */
int module_close(struct inode *inode, struct file *file)
{
	/* 
	 * Set Already_Open to zero, so one of the processes in the WaitQ will
	 * be able to set Already_Open back to one and to open the file. All 
	 * the other processes will be called when Already_Open is back to one,
	 * so they'll go back to sleep.
	 */
	Already_Open = 0;

	/* 
	 * Wake up all the processes in WaitQ, so if anybody is waiting for the
	 * file, they can have it.
	 */
	wake_up(&#38;WaitQ);

	module_put(THIS_MODULE);

	return 0;		/* success */
}

/*
 * This function decides whether to allow an operation (return zero) or not
 * allow it (return a non-zero which indicates why it is not allowed).
 *
 * The operation can be one of the following values:
 * 0 - Execute (run the "file" - meaningless in our case)
 * 2 - Write (input to the kernel module)
 * 4 - Read (output from the kernel module)
 *
 * This is the real function that checks file permissions. The permissions
 * returned by ls -l are for reference only, and can be overridden here.
 */
static int module_permission(struct inode *inode, int op, struct nameidata *nd)
{
	/* 
	 * We allow everybody to read from our module, but only root (uid 0)
	 * may write to it
	 */
	if (op == 4 || (op == 2 &#38;&#38; current-&#62;euid == 0))
		return 0;

	/* 
	 * If it's anything else, access is denied 
	 */
	return -EACCES;
}

/* 
 * Structures to register as the /proc file, with pointers to all the relevant
 * functions.
 */

/* 
 * File operations for our proc file. This is where we place pointers to all
 * the functions called when somebody tries to do something to our file. NULL
 * means we don't want to deal with something.
 */
static struct file_operations File_Ops_4_Our_Proc_File = {
	.read = module_output,	/* "read" from the file */
	.write = module_input,	/* "write" to the file */
	.open = module_open,	/* called when the /proc file is opened */
	.release = module_close,	/* called when it's closed */
};

/* 
 * Inode operations for our proc file.  We need it so we'll have somewhere to
 * specify the file operations structure we want to use, and the function we
 * use for permissions. It's also possible to specify functions to be called
 * for anything else which could be done to an inode (although we don't bother,
 * we just put NULL).
 */

static struct inode_operations Inode_Ops_4_Our_Proc_File = {
	.permission = module_permission,	/* check for permissions */
};

/* 
 * Module initialization and cleanup 
 */

/* 
 * Initialize the module - register the proc file 
 */

int init_module()
{
	int rv = 0;
	Our_Proc_File = create_proc_entry(PROC_ENTRY_FILENAME, 0644, NULL);
	Our_Proc_File-&#62;owner = THIS_MODULE;
	Our_Proc_File-&#62;proc_iops = &#38;Inode_Ops_4_Our_Proc_File;
	Our_Proc_File-&#62;proc_fops = &#38;File_Ops_4_Our_Proc_File;
	Our_Proc_File-&#62;mode = S_IFREG | S_IRUGO | S_IWUSR;
	Our_Proc_File-&#62;uid = 0;
	Our_Proc_File-&#62;gid = 0;
	Our_Proc_File-&#62;size = 80;

	if (Our_Proc_File == NULL) {
		rv = -ENOMEM;
		remove_proc_entry(PROC_ENTRY_FILENAME, &#38;proc_root);
		printk(KERN_INFO "Error: Could not initialize /proc/test\n");
	}

	return rv;
}

/* 
 * Cleanup - unregister our file from /proc.  This could get dangerous if
 * there are still processes waiting in WaitQ, because they are inside our
 * open function, which will get unloaded. I'll explain how to avoid removal
 * of a kernel module in such a case in chapter 10.
 */
void cleanup_module()
{
	remove_proc_entry(PROC_ENTRY_FILENAME, &#38;proc_root);
}</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="AEN1171"
></A
><P
><B
>Example 9-2. cat_noblock.c</B
></P
><PRE
CLASS="PROGRAMLISTING"
>/* cat_noblock.c - open a file and display its contents, but exit rather than
 * wait for input */
 
/* Copyright (C) 1998 by Ori Pomerantz */

#include  &#60;stdio.h&#62;    /* standard I/O */
#include  &#60;fcntl.h&#62;    /* for open */
#include  &#60;unistd.h&#62;   /* for read */
#include  &#60;stdlib.h&#62;   /* for exit */
#include  &#60;errno.h&#62;    /* for errno */

#define MAX_BYTES 1024*4

void main(int  argc, char *argv[])
{
  int     fd; /* The file descriptor for the file to read */
  ssize_t  bytes; /* The number of bytes read */
  char    buffer[MAX_BYTES]; /* The buffer for the bytes */
  /* Usage */
  if (argc != 2) {
    printf("Usage: %s &#60;filename&#62;\n", argv[0]);
    puts("Reads the content of a file, but doesn't wait for input");
    exit(-1);
  }
  /* Open the file for reading in non blocking mode */
  fd = open(argv[1], O_RDONLY | O_NONBLOCK);
  /* If open failed */
  if (fd == -1) {
    if (errno == EAGAIN)
       puts("Open would block");
    else
       puts("Open failed");
    exit(-1);
  }
    /* Read the file and output its contents */
  do {
    int i;
    /* Read characters from the file */
    bytes = read(fd, buffer, MAX_BYTES);
    /* If there's an error, report it and die */
    if (bytes == -1) {
       if (errno == EAGAIN)
         puts("Normally I'd block, but you told me not to");
       else
         puts("Another read error");
       exit(-1);
    }
    /* Print the characters */
    if (bytes &#62; 0) {
       for(i=0; i&#60;bytes; i++)
         putchar(buffer[i]);
    }
    /* While there are no errors and the file isn't over */
  } while (bytes &#62; 0);
}</PRE
></DIV
></DIV
></DIV
><H3
CLASS="FOOTNOTES"
>Notes</H3
><TABLE
BORDER="0"
CLASS="FOOTNOTES"
WIDTH="100%"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="5%"
><A
NAME="FTN.AEN1105"
HREF="c1068.htm#AEN1105"
><SPAN
CLASS="footnote"
>[1]</SPAN
></A
></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="95%"
><P
>最方便的保持某个文件被打开的方法是使用命令
		<B
CLASS="COMMAND"
>tail -f</B
>打开该文件。</P
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="5%"
><A
NAME="FTN.AEN1113"
HREF="c1068.htm#AEN1113"
><SPAN
CLASS="footnote"
>[2]</SPAN
></A
></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="95%"
><P
>这就意味着该进程仍然在内核态中，
		该进程已经调用了<CODE
CLASS="FUNCTION"
>open</CODE
>的系统调用，但系统调用却没有返回。
		在这段时间内该进程将不会得知别人正在使用CPU。</P
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="5%"
><A
NAME="FTN.AEN1137"
HREF="c1068.htm#AEN1137"
><SPAN
CLASS="footnote"
>[3]</SPAN
></A
></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="95%"
><P
>这是因为我们使用的是<CODE
CLASS="FUNCTION"
>module_interruptible_sleep_on</CODE
>。我们也可以使用
		<CODE
CLASS="FUNCTION"
>module_sleep_on</CODE
>，但这样会导致一些十分愤怒的用户，因为他们的<B
CLASS="KEYCAP"
>Ctrl</B
>+<B
CLASS="KEYCAP"
>c</B
>将不起任何作用。</P
></TD
></TR
></TABLE
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c998.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="c1175.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>System Calls</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Replacing Printks</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>